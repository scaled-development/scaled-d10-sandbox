{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{{ attach_library('scaled/buttons-stack') }}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    paragraph.field_color.0.value,
    paragraph.field_style.0.value
  ]
%}

{# User currently has three color options in UI #}

{% if paragraph.field_style.0.value != 'right' %} 
  {% set wrapper = ' container-sm' %}
{% endif %}

{% set style = paragraph.field_style.0.value %} 
{# two alignment options to be chosen by user in UI: default, which is center/stacked, and the alternate, with buttons to the right #}


{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    <div class="container">
      <div class="flex container-paragraphs {{ style }}">
          <div class="text{{ wrapper }}">
            {% if paragraph.field_header.0.value and paragraph.field_sub_header.0.value %}
            <h2>{{ paragraph.field_header.0.value }}</h2>
            <h3>{{ paragraph.field_sub_header.0.value }}</h3> {# for now, this is an h3  #}
            {% elseif paragraph.field_header.0.value %}
            <h2>{{ paragraph.field_header.0.value }}</h2>
            {% elseif paragraph.field_sub_header.0.value %}
            <div class="bg-text">{{ paragraph.field_sub_header.0.value }}</div>
            {% endif %}
            {{ paragraph.field_body.0.value|raw }}
            <strong><em>Rendered for testing purposes:</em></strong>
            {{ content.field_style }}
            {{ content.field_color }}
          </div>
        <div class="buttons">
          {% for item in paragraph.field_button_link %}
              {% if content.field_button_link['#items']|length > 2 and loop.first %}
              {# if there are 3 or more buttons, add special styling to first button as a main call-to-action #}
                <a class="button-cta" href="{{ item.url }}">{{ item.title }} - CTA</a>
              {% else %}
                <a class="button" href="{{ item.url }}">{{ item.title }}</a>
              {% endif %}
          {% endfor %}
        </div>
        </div>
      </div>
    </div>
  </div>
{% endblock paragraph %}

